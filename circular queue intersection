#include<iostream>
using namespace std;
class Node{
    public :
    int data;
    Node*next;
    
    Node (int val){
        data=val;next=NULL;
    }
};
    //To detectloop and starting index
     Node*detectloop(Node*head)
    {
        Node*slow=head;
        Node*fast=head;
        while (fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if (slow==fast){//loop detected
                slow = head;
                while (slow!=fast){
                    slow=slow->next;
                    fast=fast->next;
                }
                return slow;
            }
        }
        return NULL;
    }
    
    //Check the intersection 
     bool checkinter(Node*head1, Node*head2)
    {
        Node*loop1=detectloop(head1);
        Node*loop2=detectloop(head2);
        
        //if one list is circular and other is not then intersection is not possible 
        if ((loop1 && !loop2)|| (!loop1 && loop2)){
            return false;
        }
        
        //if both start from the same point 
        if (loop1==loop2)
        {
            return true;
        }
        //if loop2 comes in the way of loop1 
        Node *temp =loop1->next;
        while(temp!=loop1)
        {
            if (temp==loop2)
            {
                return true;
            }
            temp=temp->next;
        }
        return false;
    }

int main()
{
    Node *a1=new Node(1);
    Node *a2=new Node(2);
    Node *a3=new Node(3);
    //creating list1
    a1->next=a2;a2->next=a3;a3->next=a1;
    
    Node *b1=new Node(10);
    Node *b2=new Node(20);
    //creating list2
    b1->next=b2;b2->next=a2;
    
    //function call to check intersection 
    if(checkinter(a1,b1))
    {
        cout<<"Intersecting";
    }
    else {
        cout<<"Non-Intersecting";
    }
}
